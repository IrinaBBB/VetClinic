@page "/animals/create"
@page "/animals/edit/{Id:int}"
@using CatHotel.Server.Helpers
@using VetClinic_Server.Service.IService

@inject IAnimalRepository _animalRepository
@inject ISpeciesRepository _speciesRepository
@inject IAnimalImageRepository _imageRepository

@inject ILogger _logger
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload

<div class="row justify-content-start">
    <div class="col-xl-10 col-lg-10 col-md-9">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h4 class="m-0 font-weight-bold text-primary">@Title</h4>
            </div>
            <div class="card-body">
                <EditForm Model="AnimalModel" class="custom-form" OnValidSubmit="HandleAnimalUpsert">
                    <DataAnnotationsValidator/>
                    <div class="row justify-content-start">
                        <div class="custom-form__group  col-8">
                            <ValidationMessage For="() => AnimalModel.Name"/>
                            <InputText id="nameOfPet" placeholder="Name" class="custom-form__input" @bind-Value="AnimalModel.Name"/>
                            <label for="nameOfPet" class="custom-form__label">Name</label>
                        </div>
                        <div class="custom-form__group col-4 mt-1">
                            <div>
                                <ValidationMessage For="() => AnimalModel.DateOfBirth"/>
                                <InputDate id="dateOfBirth" placeholder="Date Of Birth" class="custom-form__input" @bind-Value="AnimalModel.DateOfBirth"/>
                                <label for="dateOfBirth" class="custom-form__label">Date of Birth</label>
                            </div>

                        </div>
                    </div>
                    <div class="row justify-content-start">
                        <div class="custom-form__group col-6">
                            <div class="custom-form__group">
                                <ValidationMessage For="() => AnimalModel.SpeciesId"/>
                                <InputSelect id="species" class="custom-form__input" @bind-Value="AnimalModel.SpeciesId">
                                    <option value="">Choose species</option>
                                    @foreach (var species in SpeciesList)
                                    {
                                        <option value="@species.Id">@species.Name</option>
                                    }
                                </InputSelect>
                                <label for="species" class="custom-form__label">Species</label>
                            </div>
                        </div>
                        <div class="custom-form__group col-3">
                            <div class="custom-form__group">
                                <ValidationMessage For="() => AnimalModel.Sex"/>
                                <InputSelect id="sex" class="custom-form__input" @bind-Value="AnimalModel.Sex">
                                    @foreach (var sex in Enum.GetValues(typeof(Sex)))
                                    {
                                        <option value="@sex">@sex.ToString()</option>
                                    }
                                </InputSelect>
                                <label for="sex" class="custom-form__label">Sex</label>
                            </div>
                        </div>
                        <div class="custom-form__group col-3">
                            <div class="custom-form__group">
                                <ValidationMessage For="() => AnimalModel.Neutered"/>
                                <InputSelect id="neutered" class="custom-form__input" @bind-Value="AnimalModel.Neutered">
                                    @foreach (var neutered in Enum.GetValues(typeof(Neutered)))
                                    {
                                        <option value="@neutered">@neutered.ToString()</option>
                                    }
                                </InputSelect>
                                <label for="neutered" class="custom-form__label">Neutered</label>
                            </div>
                        </div>
                    </div>
                    <div class="row justify-content-start">
                        <div class="custom-form__group col-4">
                            <div class="custom-form__group">
                                <ValidationMessage For="() => AnimalModel.Chipped"/>
                                <InputSelect id="chipped" class="custom-form__input" @bind-Value="AnimalModel.Chipped">
                                    @foreach (var chipped in Enum.GetValues(typeof(Chipped)))
                                    {
                                        <option value="@chipped">@chipped.ToString()</option>
                                    }
                                </InputSelect>
                                <label for="chipped" class="custom-form__label">Chipped</label>
                            </div>
                        </div>
                        <div class="custom-form__group col-4">
                            <ValidationMessage For="() => AnimalModel.WeightInKilos"/>
                            <InputNumber id="weight" placeholder="Weight in Kilos" class="custom-form__input" @bind-Value="AnimalModel.WeightInKilos"/>
                            <label for="weight" class="custom-form__label">Weight In Kilos</label>
                        </div>
                        <div class="custom-form__group col-4">
                            <div class="custom-form__group">
                                <ValidationMessage For="() => AnimalModel.EscapeAttempts"/>
                                <InputNumber id="escapeAttempts" placeholder="Escape Attempts" class="custom-form__input" @bind-Value="AnimalModel.EscapeAttempts"/>
                                <label for="escapeAttempts" class="custom-form__label">Escape Attempts</label>
                            </div>
                        </div>
                    </div>
                    <div class="row justify-content-start flex-column">
                        <div class="custom-form__group col-6">
                            <div class="input-group">
                                <div class="custom-file">
                                    <InputFile OnChange="HandleImageUpload" multiple class="custom-file-input" id="uploadImage"/>
                                    <label class="custom-file-label" for="uploadImage">Choose file</label>
                                </div>
                            </div>
                        </div>
                        <label class="custom-form__label ml-4" for="uploadImage">Upload animal image</label>
                    </div>
                    <div class="row">
                        @if (AnimalModel.ImageUrls != null && AnimalModel.ImageUrls.Count > 0)
                        {
                            var serial = 1;
                            foreach (var animalImageUrl in AnimalModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="image__serial">@serial</div>
                                    <img src="@animalImageUrl" alt="" style="width: 100%"/>
                                    <button @onclick="() => DeleteImage(animalImageUrl)" type="button" class="btn btn-outline-danger btn-block mt-2">
                                        <i class="fas fa-trash mr-1"></i>Delete
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>

                    <div class="d-sm-flex align-items-center justify-content-end my-2">
                        <a href="/animals" class="btn btn-secondary btn-icon-split mr-3">
                            <span class="icon text-white-50">
                                <i class="fas fa-arrow-left"></i>
                            </span>
                            <span class="text px-4">Cancel</span>
                        </a>
                        <button class="btn btn-primary btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-check"></i>
                            </span>
                            <span class="text px-4">Save</span>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    public const string RegisterTitle = "Register a new patient";
    public const string EditTitle = "Edit patient info";


    [Parameter]
    public int? Id { get; set; }

    private string Title { get; set; } = RegisterTitle;

    private static AnimalDto AnimalModel { get; set; } = new AnimalDto();
    private static IEnumerable<SpeciesDto> SpeciesList { get; set; }

    private AnimalImageDto AnimalImage { get; set; } = new();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        SpeciesList = _speciesRepository.GetAllSpecies();
        if (Id != null)
        {
            Title = "Edit patient info";
            AnimalModel = await _animalRepository.GetAnimalAsync(Id.Value);
            if (AnimalModel?.AnimalImages != null)
            {
                AnimalModel.ImageUrls = AnimalModel.AnimalImages.Select(u => u.AnimalImageUrl).ToList();
            }
        }
        else
        {
            AnimalModel = new AnimalDto();
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await _fileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (AnimalModel.ImageUrls != null && AnimalModel.ImageUrls.Any())
                    {
                        AnimalModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        AnimalModel.ImageUrls = new List<string>();
                        AnimalModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await _jsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task HandleAnimalUpsert()
    {
        try
        {
            if (AnimalModel.Id != 0 && Title == EditTitle)
            {
                var updateAnimalResult = await _animalRepository.UpdateAnimalAsync(AnimalModel.Id, AnimalModel);
                if ((AnimalModel.ImageUrls != null && AnimalModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{_navigationManager.BaseUri}AnimalImages/", "");

                            var result = _fileUpload.DeleteFile(imageName);
                            await _imageRepository.DeleteAnimalImageByImageUrlAsync(deletedImageName);
                        }
                    }
                    await AddAnimalImage(updateAnimalResult);
                }
                await _jsRuntime.ToastrSuccess("Hotel room updated successfully.");
            }
            else
            {
                var createdResult = await _animalRepository.CreateAnimalAsync(AnimalModel);
                await AddAnimalImage(createdResult);
                await _jsRuntime.ToastrSuccess("New patient created successfully.");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
        }
        _navigationManager.NavigateTo("animals");
    }

    private async Task AddAnimalImage(AnimalDto animalDetails)
    {
        foreach (var imageUrl in AnimalModel.ImageUrls)
        {
            if (AnimalModel.AnimalImages == null || AnimalModel.AnimalImages.All(x => x.AnimalImageUrl != imageUrl))
            {
                AnimalImage = new AnimalImageDto()
                {
                    AnimalId = animalDetails.Id,
                    AnimalImageUrl = imageUrl
                };
                await _imageRepository.CreateAnimalImageAsync(AnimalImage);
            }
        }
    }

    internal async Task DeleteImage(string imageUrl)
    {
        try
        {
            var imageIndex = AnimalModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{_navigationManager.BaseUri}AnimalImages/", "");
            if (AnimalModel.Id == 0 && Title == RegisterTitle)
            {
                var result = _fileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            AnimalModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }

}