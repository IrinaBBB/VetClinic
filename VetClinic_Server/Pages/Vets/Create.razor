@page "/vets/create"
@inject IDbContextFactory<VetClinicDbContext> ContextFactory
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager


<div class="row justify-content-center w-100">
   
@if (SuccessMessage is not null)
{
    <div class="row justify-content-center w-100">
        <div class="col-xl-10">
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @SuccessMessage
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>
}

@if (ErrorMessage is not null)
{
    <div class="row justify-content-center w-100">
        <div class="col-xl-10">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @ErrorMessage
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>
}
     
    <div class="col-xl-10">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h4 class="m-0 font-weight-bold text-primary">Create a new vet</h4>
            </div>
            <div class="card-body">
                <VetForm VetCreateViewModel="@VetCreateViewModel" Specializations="@Specializations" IsBusy="@IsBusy" OnSubmit="@HandleSubmit" />
            </div>
        </div>
    </div>
</div>


@code {
    private VetCreateViewModel? VetCreateViewModel { get; set; }
    private Specialization[]? Specializations { get; set; }
    private bool IsBusy { get; set; }


    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        Specializations = await context.Specializations.ToArrayAsync();
        VetCreateViewModel = new()
            {
                SpecializationId = Specializations.FirstOrDefault()?.Id
            };
    }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleValidSubmit();
        } else
        {
            HandleInvalidSubmit();
        }
    }
    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }
        IsBusy = true;
        try
        {
            var user = new AppUser
                {
                    Email = VetCreateViewModel?.Email,
                    UserName = VetCreateViewModel?.Email,
                    Vet = new Vet
                    {
                        FirstName = VetCreateViewModel?.FirstName,
                        LastName = VetCreateViewModel?.LastName,
                        Email = VetCreateViewModel?.Email,
                        Phone = VetCreateViewModel?.Phone,
                        SpecializationId = VetCreateViewModel?.SpecializationId ?? 1,
                        Education = VetCreateViewModel?.Education,
                        Available = VetCreateViewModel?.Available ?? false,
                        HasEmergencyCertification = VetCreateViewModel?.HasEmergencyCertification ?? false,
                    }
                };


            if (VetCreateViewModel?.Password is not null)
            {

                var result = await UserManager.CreateAsync(user, VetCreateViewModel?.Password!);

                if (result.Succeeded)
                {
                    await UserManager.AddToRoleAsync(user, "Vet");
                }

                SuccessMessage = $"Vet {user.Vet.FirstName} {user.Vet.LastName} was added successfully";
                ErrorMessage = null;
                VetCreateViewModel = new VetCreateViewModel();

            }
        } catch(Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding vet: {ex.Message}";
        } finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}