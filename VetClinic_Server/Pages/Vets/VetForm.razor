@if (VetCreateViewModel is not null)
{
    <EditForm Model="VetCreateViewModel" OnValidSubmit="@HandleValidSubmitMethod" OnInvalidSubmit="@HandleInvalidSubmitMethod">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.FirstName" />
                <InputText placeholder="Firstname" class="form-control" @bind-Value="VetCreateViewModel.FirstName" />
            </div>
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.LastName" />
                <InputText placeholder="Lastname" class="form-control" @bind-Value="VetCreateViewModel.LastName" />
            </div>
        </div>
        <div class="row">
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.Password" />
                <InputText placeholder="Password" class="form-control" @bind-Value="VetCreateViewModel.Password" />
            </div>
            <div class="form-group col-6">
                <InputSelect placeholder="Password" class="form-control" @bind-Value="VetCreateViewModel.SpecializationId">
                    @if (Specializations is not null)
                    {
                        @foreach (var specialization in Specializations)
                        {
                            <option value="@specialization.Id">@specialization.Name</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.Email" />
                <InputText placeholder="Email" class="form-control" @bind-Value="VetCreateViewModel.Email" />
            </div>
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.Phone" />
                <InputText placeholder="Phone Number" class="form-control" @bind-Value="VetCreateViewModel.Phone" />
            </div>
        </div>
        <div class="row">
            <div class="form-group col-6">
                <ValidationMessage class="text-danger" For="() => VetCreateViewModel.Education" />
                <InputTextArea @bind-Value="VetCreateViewModel.Education" placeholder="Education" class="form-control"></InputTextArea>
            </div>
        </div>
        <div class="row pl-4">
            <div class="custom-control custom-checkbox col-12">
                <InputCheckbox class="custom-control-input" id="available" @bind-Value="VetCreateViewModel.Available" />
                <label class="custom-control-label" for="available">
                    Available
                </label>
            </div>
            <div class="custom-control custom-checkbox col-12">
                <InputCheckbox class="custom-control-input" id="emergency" @bind-Value="VetCreateViewModel.HasEmergencyCertification" />
                <label class="custom-control-label" for="emergency">
                    Has Emergency Certification
                </label>
            </div>
        </div>
        <div class="d-sm-flex align-items-center justify-content-end my-2">
            <a href="/vets" class="btn btn-secondary btn-icon-split mr-3">
                <span class="icon text-white-50">
                    <i class="fas fa-arrow-left"></i>
                </span>
                <span class="text px-4">Back</span>
            </a>
            <button type="submit" class="btn btn-primary btn-icon-split" disabled="@IsBusy">
                <span class="icon text-white-50">
                    <i class="fas fa-check"></i>
                </span>
                <span class="text px-4">Save</span>
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public VetCreateViewModel? VetCreateViewModel { get; set; }
    [Parameter]
    public Specialization[]? Specializations { get; set; }
    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    private async Task HandleValidSubmitMethod()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }

    private async Task HandleInvalidSubmitMethod()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }
}