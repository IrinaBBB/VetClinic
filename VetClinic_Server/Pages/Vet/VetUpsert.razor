@page "/vets/create"
@inject IConfiguration Config 
@inject ApplicationDbContext DbContext

<div class="row justify-content-start">
	<div class="col-xl-10 col-lg-10 col-md-9">
		<div class="card shadow mb-4">
			<div class="card-header py-3">
				<h4 class="m-0 font-weight-bold text-primary">Create a new vet</h4>
			</div>
			<div class="card-body">
				<EditForm Model="Vet" class="custom-form" OnValidSubmit="SubmitForm">
					<DataAnnotationsValidator/>
					<div class="custom-form__group">
						<ValidationMessage For="() => Vet.Name"/>
						<InputText id="nameOfVet" placeholder="Name" class="custom-form__input" @bind-Value="Vet.Name"/>
						<label for="nameOfVet" class="custom-form__label">Name</label>
					</div>
					<div class="custom-form__group">
						<div>
							<ValidationMessage For="() => Vet.DateOfGraduation"/>
							<InputDate id="dateOfGraduation" placeholder="Date Of Birth" class="custom-form__input" @bind-Value="Vet.DateOfGraduation"/>
							<label for="dateOfGraduation" class="custom-form__label">Date of Graduation</label>
						</div>
					</div>
					<div class="custom-form__group">
						<ValidationMessage For="() => Vet.Age"/>
						<InputNumber id="age" placeholder="Name" class="custom-form__input" @bind-Value="Vet.Age"/>
						<label for="age" class="custom-form__label">Age</label>
					</div>
					<div class="row justify-content-start flex-column">
						<div class="custom-form__group col-6">
							<div class="input-group">
								<div class="custom-file">
									<InputFile OnChange="LoadFiles" class="custom-file-input" id="uploadImage" accept=".png,.jpg,.jpeg"/>
									<label class="custom-file-label" for="uploadImage">Upload a profile picture</label>
								</div>
							</div>
						</div>
						<label class="custom-form__label ml-4" for="uploadImage">Upload a new vet image</label>
					</div>
					<div class="d-sm-flex align-items-center justify-content-end my-2">
						<a href="/vets" class="btn btn-secondary btn-icon-split mr-3">
							<span class="icon text-white-50">
								<i class="fas fa-arrow-left"></i>
							</span>
							<span class="text px-4">Cancel</span>
						</a>
						<button class="btn btn-primary btn-icon-split">
							<span class="icon text-white-50">
								<i class="fas fa-check"></i>
							</span>
							<span class="text px-4">Save</span>
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@if (_errors.Count > 0)
{
	<h2>Errors:</h2>
	<ul class="text-danger">
		@foreach (var error in _errors)
		{
			<li>@error</li>
		}
	</ul>
}


@code {
	public Vet Vet { get; set; } = new Vet();

	private const long MaxFileSize = 1024 * 1024 * 3; // Represents 3MB
	private readonly List<string> _errors = new();
	private IBrowserFile _file;

	private async Task SubmitForm()
	{
		try
		{
			var relativePath = await CaptureFile();
			Vet.ImageFileName = relativePath;

			await DbContext.Vets.AddAsync(Vet);
			await DbContext.SaveChangesAsync();

			Vet = new Vet();
			_file = null;
			_errors.Clear();
		}
		catch (Exception ex)
		{
			_errors.Add($"Error: {ex.Message}");
		}
	}

	private void LoadFiles(InputFileChangeEventArgs e)
	{
		_file = e.File;
	}

	private async Task<string> CaptureFile()
	{
		if (_file is null)
		{
			return "";
		}

		try
		{
			var newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(_file.Name));
			var path = Path.Combine(Config.GetValue<string>("FileStorage"), $"user_123", newFileName);

			var relativePath = Path.Combine($"user_123", newFileName);

			Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage"), $"user_123"));

			await using FileStream fs = new(path, FileMode.Create);
			await _file.OpenReadStream(MaxFileSize).CopyToAsync(fs);

			return relativePath;
		}
		catch (Exception ex)
		{
			_errors.Add($"File: {_file.Name} Error: {ex.Message}");
			throw;
		}
	}

}