@page "/appointments"
@using Microsoft.AspNetCore.Identity
@using Radzen.Blazor
@using VetClinic_Server.Services
@using VetClinic_Server.ViewModels.Appointments


@inject NavigationManager NavigationManager
@inject IDbContextFactory<VetClinicDbContext> ContextFactory
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<AppUser> UserManager
@inject StateContainer StateContainer

<PageTitle>Create a Vet</PageTitle>

<style>
    :root {
        --rz-input-focus-shadow: rgb(47, 196, 5);
    }
    .bg-available {
        background: rgba(60, 179, 113, 0.2);
    }

    .bg-added {
        background: rgba(255, 255, 0, 0.1);
    }

    .bg-booked {
        background: rgba(0, 0, 255, 0.3);
    }

    .rz-calendar .rz-inputtext:not(:disabled):not(.rz-state-disabled):focus {
        border:2px solid rgb(47, 196, 5, 0.5);
        box-shadow: 0 0 1px 1px rgba(47, 196, 5, 0.5)
    }

 
    .rz-state-active.rz-state-focused .rz-state-default.rz-state-active.rz-datepicker-today.rz-state-focused {
        background: rgb(47, 196, 5) !important;
        box-shadow: 0 0 1px 1px rgba(47, 196, 5, 0.5)
    }

    .rz-datepicker-calendar td .rz-state-active.rz-state-focused, .rz-datepicker-calendar td .rz-state-active:hover, .rz-datepicker-calendar td .rz-state-active.rz-datepicker-today.rz-state-focused, .rz-datepicker-calendar td .rz-state-active.rz-datepicker-today:hover {
        background-color: rgb(47, 196, 5);
        box-shadow: 0 0 1px 1px rgba(47, 196, 5, 0.5)
    }
    
    
    </style>

<div class="container-fluid w-100">
    <div class="row justify-content-center w-100">
        <div class="col-xl-10">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h4 class="m-0">Create Available Appointments</h4>
                </div>
               <div class="card-body">
                    <div class="col-4">
                        <RadzenDatePicker @bind-Value=AppointmentDate DateFormat="dd.MM.yyyy" Name="DatePickerInitialViewDate" Change="@(async args => await UpdateTime())" ShowCalendarWeek />
                    </div> 
                    <div class="row mt-4">
                        <table class="table table-bordered">
                            <tbody class="text-center">
                                @for (int i = 7; i <= 15; i++)
                                {
                                    <tr>
                                        @for (int j = 0; j <= 40; j += 20)
                                        {
                                            var hour = i.ToString("D2");
                                            var minutes = j.ToString("D2");
                                            var timeKey = $"{hour}:{minutes}";

                                            TimeSlots[timeKey] = new CurrentTimeSlot
                                            {
                                                Hour = i,
                                                Minutes = j
                                            };
                                            var currentSlot = TimeSlots[timeKey];

                                            if (AvailableTimeSlots.ContainsKey(timeKey))
                                            {
                                                <td class="bg-available">
                                                    <EditForm OnSubmit="@(e => RemoveTimeSlot(e))" Model="currentSlot">
                                                        <input type="hidden" value="@timeKey" />
                                                        <span>@timeKey</span>
                                                        <button type="submit" class="btn btn-primary btn-icon-split btn-sm ml-3">
                                                            <span class="text">Remove</span>
                                                        </button>
                                                    </EditForm>
                                                </td>
                                            } else if (BookedTimeSlots.ContainsKey(timeKey))
                                            {
                                                <td class="bg-booked">
                                                    <EditForm OnSubmit="@(e => HandleBookedSlot(e))" Model="currentSlot">
                                                        <input type="hidden" value="@timeKey" />
                                                        <span class="text-black-50">@timeKey</span>
                                                        <button type="submit" class="btn btn-info btn-icon-split btn-sm ml-3">
                                                            <span class="text text-black-50">Booked</span>
                                                        </button>
                                                    </EditForm>
                                                </td>
                                            } else
                                            {
                                                <td class="bg-light">
                                                    <EditForm OnSubmit="@(e => AddTimeSlot(e))" Model="currentSlot">
                                                        <input type="hidden" value="@timeKey" />
                                                        <span>@timeKey</span>
                                                        <button type="submit" class="btn btn-secondary btn-icon-split btn-sm ml-3">
                                                            <span class="text">Add</span>
                                                        </button>
                                                    </EditForm>
                                                </td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
     </div>
</div>
</div>
@code {
    private DateTime? _appointmentDate;
    public DateTime AppointmentDate
    {
        get => _appointmentDate ?? StateContainer.VetAppointmentDate;
        set
        {
            _appointmentDate = value;
        }
    }

    private AuthenticationState? AuthenticationState { get; set; }
    public Dictionary<string, CurrentTimeSlot> TimeSlots { get; set; } = new();
    public Dictionary<string, TimeSlot> AvailableTimeSlots { get; set; } = new();
    public Dictionary<string, TimeSlot> BookedTimeSlots { get; set; } = new();
    private AppUser? AppUser { get; set; }
    private bool IsVet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    private async Task UpdateTime()
    {
        Console.WriteLine($"New Appointment Date: {AppointmentDate}");
        await Initialize();
    }
    // private async Task SetAppointmentDateAsync(DateTime value)
    // {
    //     StateContainer.VetAppointmentDate = value;
    //     _appointmentDate = value; // Update the private field
    //     Console.WriteLine($"New Appointment Date: {AppointmentDate}");
    //     await Initialize();
    // }

    private async Task Initialize()
    {
        AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = AuthenticationState?.User.Identity?.Name;
        AppUser = await UserManager.Users.Include(u => u.Vet).FirstOrDefaultAsync(u => u.Email == userEmail);

        if (AppUser != null)
        {
            var roles = await UserManager.GetRolesAsync(AppUser);
            IsVet = roles.Contains("Vet");
        }

        if (!IsVet)
        {
            NavigationManager.NavigateTo("not-authorized");
            return;
        }

        await LoadTimeSlots();
    }

    private async Task LoadTimeSlots()
    {
        using var context = ContextFactory.CreateDbContext();
        var date = AppointmentDate.Date;
        var vetId = AppUser?.Vet?.Id ?? 0;

        AvailableTimeSlots = await context.TimeSlots
            .Where(s => s.PetId == null && s.VetId == vetId && s.Date == date)
            .ToDictionaryAsync(s => s.Start.ToString("HH:mm"), s => s);

        BookedTimeSlots = await context.TimeSlots
            .Where(s => s.PetId != null && s.VetId == vetId && s.Date == date)
            .ToDictionaryAsync(s => s.Start.ToString("HH:mm"), s => s);
    }

    private async Task AddTimeSlot(EditContext editContext)
    {
        if (AppUser?.Vet == null)
            throw new Exception("User or User's Vet not found");

        var model = editContext.Model as CurrentTimeSlot;
        if (model == null)
            throw new Exception("Invalid timeslot model");

        var timeSlot = CreateTimeSlot(model);

        using var context = ContextFactory.CreateDbContext();
        context.TimeSlots.Add(timeSlot);
        await context.SaveChangesAsync();

        await LoadTimeSlots();
    }

    private async Task RemoveTimeSlot(EditContext editContext)
    {
        if (AppUser?.Vet == null)
            throw new Exception("User or User's Vet not found");

        var model = editContext.Model as CurrentTimeSlot;
        if (model == null)
            throw new Exception("Invalid timeslot model");

        var startDateTime = new DateTime(AppointmentDate.Year, AppointmentDate.Month, AppointmentDate.Day, model.Hour, model.Minutes, 0);

        using var context = ContextFactory.CreateDbContext();
        var timeSlot = await context.TimeSlots.FirstOrDefaultAsync(s => s.Start == startDateTime && s.VetId == AppUser.Vet.Id);

        if (timeSlot == null)
            throw new Exception("Time slot not found");

        context.TimeSlots.Remove(timeSlot);
        await context.SaveChangesAsync();

        await LoadTimeSlots();
    }

    private async Task HandleBookedSlot(EditContext editContext)
    {
        await JS.InvokeVoidAsync("alert", "The timeslot is already booked. Contact admin to remove it.");
    }

    private TimeSlot CreateTimeSlot(CurrentTimeSlot model)
    {
        var start = new DateTime(AppointmentDate.Year, AppointmentDate.Month, AppointmentDate.Day, model.Hour, model.Minutes, 0);
        var finish = start.AddMinutes(20);

        return new TimeSlot
            {
                Date = AppointmentDate.Date,
                Start = start,
                Finish = finish,
                VetId = AppUser!.Vet!.Id
            };
    }
}
